/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.Hospital.Clinic;

import Model.EcoSystem;
import Model.Employee.Employee;
import Model.Enterprise.Enterprise;
import Model.Organization.Organization;
import Model.Organization.OrganizationDirectory;
import Model.Role.MedicAdminRole;
import Model.Role.Role;
import Model.UserDetails.UserDetails;
import Model.Utils.HeaderColors;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author SejalChandak
 */
public class ClinicCreateMedicUser extends javax.swing.JPanel {

    /**
     * Creates new form ClinicCreateMedicUser
     */
   JPanel userProcessContainer;
   Enterprise enterprise;
   EcoSystem ecoSystem;
   UserDetails userAccount;
   OrganizationDirectory organizationDirectory;
   //Organization organization;
    public ClinicCreateMedicUser(JPanel userProcessContainer, Enterprise enterprise, EcoSystem ecoSystem, UserDetails userAccount,OrganizationDirectory organizationDirectory) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.enterprise = enterprise;
        this.ecoSystem = ecoSystem;
        this.userAccount = userAccount;
        this.organizationDirectory = organizationDirectory;
        tblUserDetailss.getTableHeader().setDefaultRenderer(new HeaderColors());
        fillTheTable();
        
//        System.out.println("organizationDirectory"+organizationDirectory.getOrganizationList());
//        System.out.println("userAccount of  USER "+userAccount.getEmployee().getName());
//        Organization isorganization = null;
//        for(Organization organization:organizationDirectory.getOrganizationList()){
//            //System.out.println("ui.Hospital.Clinic.ClinicCreateMedicUser.<init>() "+organization.getEmployeeDirectory().getEmployeeList());
//            for(Employee employee:organization.getEmployeeDirectory().getEmployeeList())
//            {
//                System.out.println("EMP NAME "+employee.getName());
//                if(userAccount.getEmployee().getName().equals(employee.getName())){
//                    isorganization = organization;
//                    break;
//                }
//                
//                
//            }
//        }
//        System.err.println("Organiztion Name "+isorganization);
            
          


    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnBack = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblUserDetailss = new javax.swing.JTable();
        txtPassword = new javax.swing.JTextField();
        txtUserName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtEmployeeName = new javax.swing.JTextField();
        btnCreateUserDetails = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));

        btnBack.setBackground(new java.awt.Color(102, 217, 255));
        btnBack.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        btnBack.setText("<<");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        tblUserDetailss.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        tblUserDetailss.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "User Name", "Role"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblUserDetailss.setGridColor(new java.awt.Color(0, 0, 0));
        jScrollPane1.setViewportView(tblUserDetailss);

        jLabel2.setBackground(new java.awt.Color(102, 217, 255));
        jLabel2.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel2.setText("User Name");

        jLabel6.setBackground(new java.awt.Color(102, 217, 255));
        jLabel6.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel6.setText("Password");

        jLabel3.setBackground(new java.awt.Color(102, 217, 255));
        jLabel3.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel3.setText("Employee Name");

        btnCreateUserDetails.setBackground(new java.awt.Color(0, 153, 51));
        btnCreateUserDetails.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        btnCreateUserDetails.setText("Create");
        btnCreateUserDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateUserDetailsActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Malayalam MN", 1, 18)); // NOI18N
        jLabel4.setText("Create Medic Employee");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addComponent(btnBack)
                .addGap(180, 180, 180)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(67, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnCreateUserDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel3)
                            .addGap(18, 18, 18)
                            .addComponent(txtEmployeeName, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel2)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtUserName, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel6)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(40, 40, 40)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 491, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(48, 48, 48))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBack))
                .addGap(98, 98, 98)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtEmployeeName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtUserName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnCreateUserDetails))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnCreateUserDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateUserDetailsActionPerformed
        
        
        if(txtEmployeeName.getText().isEmpty() || txtPassword.getText().isEmpty() || txtUserName.getText().isEmpty()){
         JOptionPane.showMessageDialog(this, "Please add all the fields");
        return;
        }
        
        
        String employeeName = txtEmployeeName.getText();
        
        if ("".equals(employeeName)) {
                JOptionPane.showMessageDialog(null, "Please enter employee name!!", "Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }
        
        Organization organization = null;
        for(Organization o:organizationDirectory.getOrganizationList()){
            //System.out.println("ui.Hospital.Clinic.ClinicCreateMedicUser.<init>() "+organization.getEmployeeDirectory().getEmployeeList());
            for(Employee employee:o.getEmployeeDirectory().getEmployeeList())
            {
                
                if(userAccount.getEmployee().getName().equals(employee.getName())){
                    organization = o;
                    break;
                }
                
                
            }
        }
        Employee employee = organization.getEmployeeDirectory().createEmployee(employeeName);
        String userName = txtUserName.getText();
        String password = txtPassword.getText();
        Role role = new MedicAdminRole();
        
        if ("".equals(userName)) {
                JOptionPane.showMessageDialog(null, "Please enter user name!!", "Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }
        if ("".equals(password)) {
                JOptionPane.showMessageDialog(null, "Please enter password name!!", "Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }
        
       
        
        
        if(EcoSystem.checkIfUsernameIsUnique(userName)){

           

            organization.getUserDetailsDirectory().createUserDetails(userName, password, employee, role);

            fillTheTable();
        }
        else{
            JOptionPane.showMessageDialog(null, "Please enter unique username", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnCreateUserDetailsActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCreateUserDetails;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblUserDetailss;
    private javax.swing.JTextField txtEmployeeName;
    private javax.swing.JTextField txtPassword;
    private javax.swing.JTextField txtUserName;
    // End of variables declaration//GEN-END:variables

    private void fillTheTable() {
        DefaultTableModel model = (DefaultTableModel) tblUserDetailss.getModel();
        model.setRowCount(0);
        
         Organization organization = null;
        for(Organization o:organizationDirectory.getOrganizationList()){
            //System.out.println("ui.Hospital.Clinic.ClinicCreateMedicUser.<init>() "+organization.getEmployeeDirectory().getEmployeeList());
            for(Employee employee:o.getEmployeeDirectory().getEmployeeList())
            {
                
                if(userAccount.getEmployee().getName().equals(employee.getName())){
                    organization = o;
                    break;
                }
                
                
            }
        }
        
            for (UserDetails ua : organization.getUserDetailsDirectory().getUserDetailsList()) {
                Object row[] = new Object[2];
                row[0] = ua;
                row[1] = ua.getRole().toString().substring(20);
                ((DefaultTableModel) tblUserDetailss.getModel()).addRow(row);
            }
        
    }
}
