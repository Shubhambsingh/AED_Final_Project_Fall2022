/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.HelpingHands.Meal;

import Model.MealandShelterDistributor.Meal;
import Model.EcoSystem;
import Model.Enterprise.Enterprise;
import Model.Organization.OrganizationDirectory;
import Model.UserDetails.UserDetails;
import Model.Utils.HeaderColors;
import Model.WorkQueue.LocalityMedicRequest;
import Model.WorkQueue.LocalityMealRequest;
import Model.WorkQueue.MealOrgWorkRequest;
import Model.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Abhishek
 */
public class ManageLocalityMealRequestJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageLocalityMealRequestJPanel
     */
    
    JPanel userProcessContainer;
    OrganizationDirectory organizationDirectory;
    Enterprise enterprise;
    EcoSystem ecoSystem;
    UserDetails userAccount;
    
    public ManageLocalityMealRequestJPanel(JPanel userProcessContainer, OrganizationDirectory organizationDirectory, Enterprise enterprise,EcoSystem ecoSystem,UserDetails userAccount) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.organizationDirectory = organizationDirectory;
        this.enterprise = enterprise;
        this.ecoSystem = ecoSystem;
        this.userAccount = userAccount;
        
        tblRequestTableLocality.getTableHeader().setDefaultRenderer(new HeaderColors());
        tblMealStatus.getTableHeader().setDefaultRenderer(new HeaderColors());
        
        populateMealInventory();
        populateRequestTable();
        
    }

    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblRequestTableLocality = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblMealStatus = new javax.swing.JTable();
        btnAssignToMe = new javax.swing.JButton();
        btnDeleteReqHosp = new javax.swing.JButton();
        btnApproveReqHospital = new javax.swing.JButton();
        btnRejectReqHospital = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));

        tblRequestTableLocality.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Food Type", " #People Affected", "Venue", "Request Date", "Resolved Date", "Purpose", "Status", "#Packets"
            }
        ));
        jScrollPane1.setViewportView(tblRequestTableLocality);

        tblMealStatus.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Meal Type", "Quantity"
            }
        ));
        jScrollPane2.setViewportView(tblMealStatus);

        btnAssignToMe.setText("Assign to me");
        btnAssignToMe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssignToMeActionPerformed(evt);
            }
        });

        btnDeleteReqHosp.setBackground(new java.awt.Color(255, 102, 102));
        btnDeleteReqHosp.setText("Delete");
        btnDeleteReqHosp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteReqHospActionPerformed(evt);
            }
        });

        btnApproveReqHospital.setBackground(new java.awt.Color(0, 153, 51));
        btnApproveReqHospital.setText("Approve");
        btnApproveReqHospital.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApproveReqHospitalActionPerformed(evt);
            }
        });

        btnRejectReqHospital.setBackground(new java.awt.Color(255, 102, 102));
        btnRejectReqHospital.setText("Reject");
        btnRejectReqHospital.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRejectReqHospitalActionPerformed(evt);
            }
        });

        btnBack.setBackground(new java.awt.Color(102, 217, 255));
        btnBack.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        btnBack.setText("<<");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Malayalam MN", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Locality Meal Request");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 525, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(btnAssignToMe)
                            .addGap(26, 26, 26)
                            .addComponent(btnDeleteReqHosp)
                            .addGap(53, 53, 53)
                            .addComponent(btnApproveReqHospital)
                            .addGap(54, 54, 54)
                            .addComponent(btnRejectReqHospital))
                        .addComponent(jScrollPane1)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 789, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 20, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBack))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDeleteReqHosp)
                    .addComponent(btnApproveReqHospital)
                    .addComponent(btnRejectReqHospital)
                    .addComponent(btnAssignToMe))
                .addGap(43, 43, 43)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(187, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAssignToMeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssignToMeActionPerformed
        // TODO add your handling code here:
        int selectedRow= tblRequestTableLocality.getSelectedRow();
        if(selectedRow<0){
            JOptionPane.showMessageDialog(null, "Please select the row to assign the Request", "Warning", JOptionPane.WARNING_MESSAGE);
        }
        else{
            LocalityMealRequest c =  (LocalityMealRequest)tblRequestTableLocality.getValueAt(selectedRow, 6);
            //NGOWorkRequest p=(NGOWorkRequest) tblRequestTableLocality.getValueAt(selectedRow, 4);

            c.setStatus("Pending");
            c.setReceiver(userAccount);

            populateRequestTable();

        }
    }//GEN-LAST:event_btnAssignToMeActionPerformed

    private void btnDeleteReqHospActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteReqHospActionPerformed
        // TODO add your handling code here:
        int selectedRow= tblRequestTableLocality.getSelectedRow();
        if(selectedRow<0){
            JOptionPane.showMessageDialog(null, "Please select the row to delete the request", "Warning", JOptionPane.WARNING_MESSAGE);
        }
        else{

            WorkRequest p=(WorkRequest) tblRequestTableLocality.getValueAt(selectedRow, 6);

            userAccount.getWorkQueue().getWorkRequestList().remove(p);
            ecoSystem.getWorkQueue().getWorkRequestList().remove(p);
            enterprise.getWorkQueue().getWorkRequestList().remove(p);

            JOptionPane.showMessageDialog(null, "You have successfully deleted the request");
            populateRequestTable();
        }
    }//GEN-LAST:event_btnDeleteReqHospActionPerformed

    private void btnApproveReqHospitalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApproveReqHospitalActionPerformed
        // TODO add your handling code here:

        int selectedRow= tblRequestTableLocality.getSelectedRow();
        if(selectedRow<0){
            JOptionPane.showMessageDialog(null, "Please select the row to assign the account", "Warning", JOptionPane.WARNING_MESSAGE);
        }
        else{

            LocalityMealRequest p=(LocalityMealRequest) tblRequestTableLocality.getValueAt(selectedRow, 6);

            int temp=0;
            if(p.getReceiver()!= null){
                if (p.getStatus().equalsIgnoreCase("Pending")) {
                    UserDetails a =p
                            .getSender();
                    if(ecoSystem.getMealInventory().getMealInventory().size()<= 0){
                        JOptionPane.showMessageDialog(null, "Meal not Available.");
                        return;
                    }
                    for (Meal v : ecoSystem.getMealInventory().getMealInventory() ) {
                        if (v.getMealType().equals(p.getRequestedMealType())){
                            //if(p.getDocName().equals(v.getDocName())){
                                if(v.getQuantity()- p.getNoOfPackets() <0){
                                    JOptionPane.showMessageDialog(null, "Meal Stock insufficient. Please wait for sometime");
                                    return;
                                }
                                temp=1;
                                v.setQuantity(v.getQuantity()- p.getNoOfPackets() );
                                break;
                                //}
                        }

                    }
                    if(temp==0){
                        JOptionPane.showMessageDialog(null, "Meal Not Available");
                        return;
                    }

                    p.setStatus("Approved");
                    Date resolveDate = new Date();
                    p.setResolveDate(resolveDate);
                    JOptionPane.showMessageDialog(null, "You have successfully completed the request");
                    //populateAvailableMedicTbl();
                    populateMealInventory();
                    populateRequestTable();
                } else if(p.getStatus().equalsIgnoreCase("Rejected")){
                    JOptionPane.showMessageDialog(null, "You cannot approve the rejected request.");

                }else {
                    JOptionPane.showMessageDialog(null, "Cannot Approve the request 2 times.");
                }
            }
            else{
                JOptionPane.showMessageDialog(null, "Please assign first");
            }

        }
    }//GEN-LAST:event_btnApproveReqHospitalActionPerformed

    private void btnRejectReqHospitalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRejectReqHospitalActionPerformed
        // TODO add your handling code here:
        int selectedRow= tblRequestTableLocality.getSelectedRow();
        if(selectedRow<0){
            JOptionPane.showMessageDialog(null, "Please select the row to reject the Request", "Warning", JOptionPane.WARNING_MESSAGE);
        }
        else{

            LocalityMealRequest p=(LocalityMealRequest) tblRequestTableLocality.getValueAt(selectedRow, 6);
            if(p.getStatus().equalsIgnoreCase("Approved")){
                JOptionPane.showMessageDialog(null, "Cannot Reject the Approved request", "Warning", JOptionPane.WARNING_MESSAGE);
            }else if(p.getStatus().equalsIgnoreCase("Rejected")){
                JOptionPane.showMessageDialog(null, "Cannot Reject the request 2 times", "Warning", JOptionPane.WARNING_MESSAGE);
            }else{
                if (p.getStatus().equalsIgnoreCase("Pending")) {
                    p.setStatus("Rejected");
                    p.setReceiver(userAccount);
                    Date resolveDate = new Date();
                    p.setResolveDate(resolveDate);
                }else{
                    JOptionPane.showMessageDialog(null, "Please assign first");
                }
            }
            populateRequestTable();

        }
    }//GEN-LAST:event_btnRejectReqHospitalActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    
     private void populateRequestTable(){
        DefaultTableModel model = (DefaultTableModel) tblRequestTableLocality.getModel();
        model.setRowCount(0);
        for(WorkRequest work : ecoSystem.getWorkQueue().getWorkRequestList()){
            if(work instanceof LocalityMealRequest){
                Object[] row = new Object[8];
                row[0] = ((LocalityMealRequest) work).getRequestedMealType() ;
                row[3] = ((LocalityMealRequest) work).getRequestDate() ;
                row[1] = ((LocalityMealRequest) work).getNoPeopleRequestingMeal() ;
                row[2] = ((LocalityMealRequest) work).getArea() ;
                row[6] = work;
                row[5] = ((LocalityMealRequest) work).getPurpose() ;
                row[4] = ((LocalityMealRequest) work).getResolveDate();
                row[7] = ((LocalityMealRequest) work).getNoOfPackets();
                model.addRow(row);
            
            }
        }
        
    }
     
     
      public void populateMealInventory() {
        System.out.println("ui.HelpingHands.Meal.ManageMealInventory.populateMealInventory()");
//        updateMealInventory();
        DefaultTableModel table = (DefaultTableModel) tblMealStatus.getModel();
        table.setRowCount(0);
        
        System.out.print("food inventory size");
        System.out.print(ecoSystem.getMealInventory().getMealInventory().size());

        for(Meal food : ecoSystem.getMealInventory().getMealInventory() ){
             Object[] row = new Object[3];
            row[0] = food;
            row[1] = food.getMealType();
            row[2] = food.getQuantity();
            System.out.print(row[1]);
            table.addRow(row);
        }
           

    }
    
    
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnApproveReqHospital;
    private javax.swing.JButton btnAssignToMe;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnDeleteReqHosp;
    private javax.swing.JButton btnRejectReqHospital;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblMealStatus;
    private javax.swing.JTable tblRequestTableLocality;
    // End of variables declaration//GEN-END:variables
}
